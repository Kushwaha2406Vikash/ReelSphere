{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 87, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Lenovo/Desktop/Reel/my-app/lib/db.ts"],"sourcesContent":["\r\nimport mongoose from \"mongoose\";\r\nimport dotenv from \"dotenv\";\r\ndotenv.config();\r\n\r\n\r\nconst MONGODB_URI = process.env.MONGODB_URI!;\r\nconsole.log(\"MONGODB_URI:\", process.env.MONGODB_URI);\r\n\r\nif(!MONGODB_URI){\r\n    throw new Error(\"Please define mongodb uri in env file \");\r\n}\r\n\r\nlet cached = global.mongoose;\r\n\r\nif(!cached){\r\n    cached = global.mongoose = {conn:null,promise:null};\r\n}\r\n\r\n\r\nexport async function connectToDatabase() {\r\n    \r\n    if(cached.conn){\r\n        return cached.conn\r\n    }\r\n    if(!cached.promise){\r\n\r\n        const opts = {\r\n          bufferCommands:true,\r\n          maxPoolSize:10,\r\n        }\r\n    \r\n    cached.promise=mongoose.connect(MONGODB_URI, opts)\r\n    .then(()=> mongoose.connection);\r\n    \r\n}\r\n\r\ntry{\r\n   cached.conn = await cached.promise\r\n}catch(error){\r\n\r\n    cached.promise=null\r\n\r\n    throw new Error(\"Check database file\");\r\n}\r\n\r\nreturn cached.conn;\r\n\r\n} \r\n\r\n"],"names":[],"mappings":";;;AACA;AACA;;;AACA,uIAAA,CAAA,UAAM,CAAC,MAAM;AAGb,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW;AAC3C,QAAQ,GAAG,CAAC,gBAAgB,QAAQ,GAAG,CAAC,WAAW;AAEnD,IAAG,CAAC,aAAY;IACZ,MAAM,IAAI,MAAM;AACpB;AAEA,IAAI,SAAS,OAAO,QAAQ;AAE5B,IAAG,CAAC,QAAO;IACP,SAAS,OAAO,QAAQ,GAAG;QAAC,MAAK;QAAK,SAAQ;IAAI;AACtD;AAGO,eAAe;IAElB,IAAG,OAAO,IAAI,EAAC;QACX,OAAO,OAAO,IAAI;IACtB;IACA,IAAG,CAAC,OAAO,OAAO,EAAC;QAEf,MAAM,OAAO;YACX,gBAAe;YACf,aAAY;QACd;QAEJ,OAAO,OAAO,GAAC,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,aAAa,MAC5C,IAAI,CAAC,IAAK,yGAAA,CAAA,UAAQ,CAAC,UAAU;IAElC;IAEA,IAAG;QACA,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;IACrC,EAAC,OAAM,OAAM;QAET,OAAO,OAAO,GAAC;QAEf,MAAM,IAAI,MAAM;IACpB;IAEA,OAAO,OAAO,IAAI;AAElB"}},
    {"offset": {"line": 126, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 132, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Lenovo/Desktop/Reel/my-app/models/User.ts"],"sourcesContent":["\r\nimport mongoose , {Schema,model,models} from \"mongoose\";\r\nimport bcrypt from \"bcryptjs\";\r\n\r\nexport interface IUser{\r\n    email:string;\r\n    password:string;\r\n    _id?:mongoose.Types.ObjectId;\r\n    createdAt?:Date;\r\n    updatedAt?:Date;\r\n}\r\n\r\n\r\nconst userSchema = new Schema<IUser>(\r\n  {\r\n    email:{type:String,required:true,unique:true},\r\n    password:{type:String,required:true},\r\n  },\r\n  {timestamps:true},\r\n);\r\n\r\nuserSchema.pre(\"save\",async function (next) {\r\n    \r\n    if(this.isModified(\"password\")){\r\n        this.password = await bcrypt.hash(this.password,10);\r\n    }\r\n    next()\r\n});\r\n\r\n\r\nconst User = models?.User || model<IUser>(\"User\",userSchema);\r\n \r\n\r\nexport default User;\r\n"],"names":[],"mappings":";;;AACA;AACA;;;AAWA,MAAM,aAAa,IAAI,yGAAA,CAAA,SAAM,CAC3B;IACE,OAAM;QAAC,MAAK;QAAO,UAAS;QAAK,QAAO;IAAI;IAC5C,UAAS;QAAC,MAAK;QAAO,UAAS;IAAI;AACrC,GACA;IAAC,YAAW;AAAI;AAGlB,WAAW,GAAG,CAAC,QAAO,eAAgB,IAAI;IAEtC,IAAG,IAAI,CAAC,UAAU,CAAC,aAAY;QAC3B,IAAI,CAAC,QAAQ,GAAG,MAAM,mIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAC;IACpD;IACA;AACJ;AAGA,MAAM,OAAO,yGAAA,CAAA,SAAM,EAAE,QAAQ,CAAA,GAAA,yGAAA,CAAA,QAAK,AAAD,EAAS,QAAO;uCAGlC"}},
    {"offset": {"line": 160, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 166, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Lenovo/Desktop/Reel/my-app/lib/auth.ts"],"sourcesContent":["import { NextAuthOptions } from \"next-auth\";\r\n\r\nimport CredentialsProvider from \"next-auth/providers/credentials\";\r\nimport { connectToDatabase } from \"./db\";\r\nimport User from \"@/models/User\";\r\n\r\nimport bcrypt from \"bcryptjs\";\r\n\r\nexport const authOptions: NextAuthOptions = {\r\n  providers: [\r\n    CredentialsProvider({\r\n      name: \"Credentials\",\r\n\r\n      credentials: {\r\n        email: { label: \"Email\", type: \"text\" },\r\n        password: { label: \"Password\", type: \"password\" },\r\n      },\r\n\r\n      async authorize(credentials) {\r\n        if (!credentials?.email || !credentials?.password) {\r\n          throw new Error(\"Missing email or password\");\r\n        }\r\n\r\n        try {\r\n          await connectToDatabase();\r\n\r\n          const user = await User.findOne({ email: credentials.email });\r\n\r\n          if (!user) {\r\n            throw new Error(\"No user found\");\r\n          }\r\n          \r\n          const isValid = await bcrypt.compare(\r\n            credentials.password,\r\n            user.password\r\n          );\r\n\r\n          if (!isValid) {\r\n            throw new Error(\"Invalid Password\");\r\n          }\r\n\r\n          return {\r\n            id: user._id.toString(),\r\n            email: user.email,\r\n          };\r\n        } catch (error) {\r\n          throw error;\r\n        }\r\n      },\r\n    }),\r\n  ],\r\n\r\n  callbacks:{\r\n    async jwt({token,user}){\r\n\r\n        if(user){\r\n            token.id=user.id\r\n        }\r\n        return token\r\n    },\r\n    async session({session,token}){\r\n        \r\n        if(session.user){\r\n            session.user.id=token.id as string\r\n        }\r\n        \r\n        \r\n        return session\r\n    }\r\n  },\r\n  pages:{\r\n    \r\n    signIn:\"/login\",\r\n    error:\"/login\"\r\n  },\r\n  session:{\r\n    strategy:\"jwt\",\r\n    maxAge:30*24*60*60\r\n  },\r\n  secret:process.env.NEXTAUTH_SECRET\r\n};\r\n"],"names":[],"mappings":";;;AAEA;AACA;AACA;AAEA;;;;;AAEO,MAAM,cAA+B;IAC1C,WAAW;QACT,CAAA,GAAA,0JAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,MAAM;YAEN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAO;gBACtC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YAEA,MAAM,WAAU,WAAW;gBACzB,IAAI,CAAC,aAAa,SAAS,CAAC,aAAa,UAAU;oBACjD,MAAM,IAAI,MAAM;gBAClB;gBAEA,IAAI;oBACF,MAAM,CAAA,GAAA,2GAAA,CAAA,oBAAiB,AAAD;oBAEtB,MAAM,OAAO,MAAM,gHAAA,CAAA,UAAI,CAAC,OAAO,CAAC;wBAAE,OAAO,YAAY,KAAK;oBAAC;oBAE3D,IAAI,CAAC,MAAM;wBACT,MAAM,IAAI,MAAM;oBAClB;oBAEA,MAAM,UAAU,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAClC,YAAY,QAAQ,EACpB,KAAK,QAAQ;oBAGf,IAAI,CAAC,SAAS;wBACZ,MAAM,IAAI,MAAM;oBAClB;oBAEA,OAAO;wBACL,IAAI,KAAK,GAAG,CAAC,QAAQ;wBACrB,OAAO,KAAK,KAAK;oBACnB;gBACF,EAAE,OAAO,OAAO;oBACd,MAAM;gBACR;YACF;QACF;KACD;IAED,WAAU;QACR,MAAM,KAAI,EAAC,KAAK,EAAC,IAAI,EAAC;YAElB,IAAG,MAAK;gBACJ,MAAM,EAAE,GAAC,KAAK,EAAE;YACpB;YACA,OAAO;QACX;QACA,MAAM,SAAQ,EAAC,OAAO,EAAC,KAAK,EAAC;YAEzB,IAAG,QAAQ,IAAI,EAAC;gBACZ,QAAQ,IAAI,CAAC,EAAE,GAAC,MAAM,EAAE;YAC5B;YAGA,OAAO;QACX;IACF;IACA,OAAM;QAEJ,QAAO;QACP,OAAM;IACR;IACA,SAAQ;QACN,UAAS;QACT,QAAO,KAAG,KAAG,KAAG;IAClB;IACA,QAAO,QAAQ,GAAG,CAAC,eAAe;AACpC"}},
    {"offset": {"line": 241, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 327, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Lenovo/Desktop/Reel/my-app/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["\r\nimport { authOptions } from \"@/lib/auth\";\r\n\r\nimport NextAuth from \"next-auth\";\r\n\r\nconst handler = NextAuth(authOptions);\r\n\r\nexport {handler as GET, handler as POST};"],"names":[],"mappings":";;;;AACA;AAEA;;;AAEA,MAAM,UAAU,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE,6GAAA,CAAA,cAAW"}},
    {"offset": {"line": 337, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}