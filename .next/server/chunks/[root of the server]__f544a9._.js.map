{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 95, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Lenovo/Desktop/Reel/my-app/lib/db.ts"],"sourcesContent":["\r\nimport mongoose from \"mongoose\";\r\nimport dotenv from \"dotenv\";\r\ndotenv.config();\r\n\r\n\r\nconst MONGODB_URI = process.env.MONGODB_URI!;\r\nconsole.log(\"MONGODB_URI:\", process.env.MONGODB_URI);\r\n\r\nif(!MONGODB_URI){\r\n    throw new Error(\"Please define mongodb uri in env file \");\r\n}\r\n\r\nlet cached = global.mongoose;\r\n\r\nif(!cached){\r\n    cached = global.mongoose = {conn:null,promise:null};\r\n}\r\n\r\n\r\nexport async function connectToDatabase() {\r\n    \r\n    if(cached.conn){\r\n        return cached.conn\r\n    }\r\n    if(!cached.promise){\r\n\r\n        const opts = {\r\n          bufferCommands:true,\r\n          maxPoolSize:10,\r\n        }\r\n    \r\n    cached.promise=mongoose.connect(MONGODB_URI, opts)\r\n    .then(()=> mongoose.connection);\r\n    \r\n}\r\n\r\ntry{\r\n   cached.conn = await cached.promise\r\n}catch(error){\r\n\r\n    cached.promise=null\r\n\r\n    throw new Error(\"Check database file\");\r\n}\r\n\r\nreturn cached.conn;\r\n\r\n} \r\n\r\n"],"names":[],"mappings":";;;AACA;AACA;;;AACA,uIAAA,CAAA,UAAM,CAAC,MAAM;AAGb,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW;AAC3C,QAAQ,GAAG,CAAC,gBAAgB,QAAQ,GAAG,CAAC,WAAW;AAEnD,IAAG,CAAC,aAAY;IACZ,MAAM,IAAI,MAAM;AACpB;AAEA,IAAI,SAAS,OAAO,QAAQ;AAE5B,IAAG,CAAC,QAAO;IACP,SAAS,OAAO,QAAQ,GAAG;QAAC,MAAK;QAAK,SAAQ;IAAI;AACtD;AAGO,eAAe;IAElB,IAAG,OAAO,IAAI,EAAC;QACX,OAAO,OAAO,IAAI;IACtB;IACA,IAAG,CAAC,OAAO,OAAO,EAAC;QAEf,MAAM,OAAO;YACX,gBAAe;YACf,aAAY;QACd;QAEJ,OAAO,OAAO,GAAC,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,aAAa,MAC5C,IAAI,CAAC,IAAK,yGAAA,CAAA,UAAQ,CAAC,UAAU;IAElC;IAEA,IAAG;QACA,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;IACrC,EAAC,OAAM,OAAM;QAET,OAAO,OAAO,GAAC;QAEf,MAAM,IAAI,MAAM;IACpB;IAEA,OAAO,OAAO,IAAI;AAElB"}},
    {"offset": {"line": 134, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 140, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Lenovo/Desktop/Reel/my-app/models/User.ts"],"sourcesContent":["\r\nimport mongoose , {Schema,model,models} from \"mongoose\";\r\nimport bcrypt from \"bcryptjs\";\r\n\r\nexport interface IUser{\r\n    email:string;\r\n    password:string;\r\n    _id?:mongoose.Types.ObjectId;\r\n    createdAt?:Date;\r\n    updatedAt?:Date;\r\n}\r\n\r\n\r\nconst userSchema = new Schema<IUser>(\r\n  {\r\n    email:{type:String,required:true,unique:true},\r\n    password:{type:String,required:true},\r\n  },\r\n  {timestamps:true},\r\n);\r\n\r\nuserSchema.pre(\"save\",async function (next) {\r\n    \r\n    if(this.isModified(\"password\")){\r\n        this.password = await bcrypt.hash(this.password,10);\r\n    }\r\n    next()\r\n});\r\n\r\n\r\nconst User = models?.User || model<IUser>(\"User\",userSchema);\r\n \r\n\r\nexport default User;\r\n"],"names":[],"mappings":";;;AACA;AACA;;;AAWA,MAAM,aAAa,IAAI,yGAAA,CAAA,SAAM,CAC3B;IACE,OAAM;QAAC,MAAK;QAAO,UAAS;QAAK,QAAO;IAAI;IAC5C,UAAS;QAAC,MAAK;QAAO,UAAS;IAAI;AACrC,GACA;IAAC,YAAW;AAAI;AAGlB,WAAW,GAAG,CAAC,QAAO,eAAgB,IAAI;IAEtC,IAAG,IAAI,CAAC,UAAU,CAAC,aAAY;QAC3B,IAAI,CAAC,QAAQ,GAAG,MAAM,mIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAC;IACpD;IACA;AACJ;AAGA,MAAM,OAAO,yGAAA,CAAA,SAAM,EAAE,QAAQ,CAAA,GAAA,yGAAA,CAAA,QAAK,AAAD,EAAS,QAAO;uCAGlC"}},
    {"offset": {"line": 168, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 174, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Lenovo/Desktop/Reel/my-app/app/api/auth/register/route.ts"],"sourcesContent":["\r\nimport {NextRequest,NextResponse} from 'next/server';\r\nimport {connectToDatabase} from  \"@/lib/db\";\r\nimport User from '@/models/User';\r\n\r\nexport async function POST(request:NextRequest){\r\n\r\n    try{\r\n\r\n         const {email,password}= await request.json();\r\n\r\n         if(!email || !password){\r\n\r\n            return NextResponse.json(\r\n                {error:\"email password are required\"},\r\n                {status:400}\r\n            )\r\n         }\r\n\r\n         await connectToDatabase();\r\n\r\n        const existingUser= await User.findOne({email});\r\n\r\n        if(existingUser){\r\n            return NextResponse.json(\r\n                {error:\"email is already registered\"},\r\n                {status:400}\r\n            )\r\n        }\r\n\r\n        await User.create({\r\n            email,\r\n            password\r\n        })\r\n\r\n\r\n        return NextResponse.json(\r\n            {message:\"User registered Successfuly \"},\r\n            {status:201}\r\n        )\r\n\r\n    }catch(error){\r\n        return NextResponse.json(\r\n            {error:\"Failed registered\"},\r\n            {status:400}\r\n        )\r\n    }\r\n}\r\n"],"names":[],"mappings":";;;AACA;AACA;AACA;;;;AAEO,eAAe,KAAK,OAAmB;IAE1C,IAAG;QAEE,MAAM,EAAC,KAAK,EAAC,QAAQ,EAAC,GAAE,MAAM,QAAQ,IAAI;QAE1C,IAAG,CAAC,SAAS,CAAC,UAAS;YAEpB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;gBAAC,OAAM;YAA6B,GACpC;gBAAC,QAAO;YAAG;QAElB;QAEA,MAAM,CAAA,GAAA,2GAAA,CAAA,oBAAiB,AAAD;QAEvB,MAAM,eAAc,MAAM,gHAAA,CAAA,UAAI,CAAC,OAAO,CAAC;YAAC;QAAK;QAE7C,IAAG,cAAa;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;gBAAC,OAAM;YAA6B,GACpC;gBAAC,QAAO;YAAG;QAEnB;QAEA,MAAM,gHAAA,CAAA,UAAI,CAAC,MAAM,CAAC;YACd;YACA;QACJ;QAGA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;YAAC,SAAQ;QAA8B,GACvC;YAAC,QAAO;QAAG;IAGnB,EAAC,OAAM,OAAM;QACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;YAAC,OAAM;QAAmB,GAC1B;YAAC,QAAO;QAAG;IAEnB;AACJ"}},
    {"offset": {"line": 221, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}