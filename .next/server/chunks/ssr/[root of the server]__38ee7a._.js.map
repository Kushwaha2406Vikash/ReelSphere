{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Lenovo/Desktop/Reel/my-app/app/components/Notification.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { createContext, useContext, useState, ReactNode } from \"react\";\r\n\r\ntype NotificationType = \"success\" | \"error\" | \"warning\" | \"info\";\r\n\r\ninterface NotificationContextType {\r\n  showNotification: (message: string, type: NotificationType) => void;\r\n}\r\n\r\nconst NotificationContext = createContext<NotificationContextType | undefined>(\r\n  undefined\r\n);\r\n\r\nexport function NotificationProvider({ children }: { children: ReactNode }) {\r\n  const [notification, setNotification] = useState<{\r\n    message: string;\r\n    type: NotificationType;\r\n    id: number;\r\n  } | null>(null);\r\n\r\n  const showNotification = (message: string, type: NotificationType) => {\r\n    const id = Date.now();\r\n    setNotification({ message, type, id });\r\n    setTimeout(() => {\r\n      setNotification((current) => (current?.id === id ? null : current));\r\n    }, 3000);\r\n  };\r\n\r\n  return (\r\n    <NotificationContext.Provider value={{ showNotification }}>\r\n      {children}\r\n      {notification && (\r\n        <div className=\"toast toast-bottom toast-end z-[100]\">\r\n          <div className={`alert ${getAlertClass(notification.type)}`}>\r\n            <span>{notification.message}</span>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </NotificationContext.Provider>\r\n  );\r\n}\r\n\r\nfunction getAlertClass(type: NotificationType): string {\r\n  switch (type) {\r\n    case \"success\":\r\n      return \"alert-success\";\r\n    case \"error\":\r\n      return \"alert-error\";\r\n    case \"warning\":\r\n      return \"alert-warning\";\r\n    case \"info\":\r\n      return \"alert-info\";\r\n    default:\r\n      return \"alert-info\";\r\n  }\r\n}\r\n\r\nexport function useNotification() {\r\n  const context = useContext(NotificationContext);\r\n  if (context === undefined) {\r\n    throw new Error(\r\n      \"useNotification must be used within a NotificationProvider\"\r\n    );\r\n  }\r\n  return context;\r\n}"],"names":[],"mappings":";;;;;AAEA;AAFA;;;AAUA,MAAM,oCAAsB,CAAA,GAAA,qMAAA,CAAA,gBAAa,AAAD,EACtC;AAGK,SAAS,qBAAqB,EAAE,QAAQ,EAA2B;IACxE,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAIrC;IAEV,MAAM,mBAAmB,CAAC,SAAiB;QACzC,MAAM,KAAK,KAAK,GAAG;QACnB,gBAAgB;YAAE;YAAS;YAAM;QAAG;QACpC,WAAW;YACT,gBAAgB,CAAC,UAAa,SAAS,OAAO,KAAK,OAAO;QAC5D,GAAG;IACL;IAEA,qBACE,8OAAC,oBAAoB,QAAQ;QAAC,OAAO;YAAE;QAAiB;;YACrD;YACA,8BACC,8OAAC;gBAAI,WAAU;0BACb,cAAA,8OAAC;oBAAI,WAAW,CAAC,MAAM,EAAE,cAAc,aAAa,IAAI,GAAG;8BACzD,cAAA,8OAAC;kCAAM,aAAa,OAAO;;;;;;;;;;;;;;;;;;;;;;AAMvC;AAEA,SAAS,cAAc,IAAsB;IAC3C,OAAQ;QACN,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT;YACE,OAAO;IACX;AACF;AAEO,SAAS;IACd,MAAM,UAAU,CAAA,GAAA,qMAAA,CAAA,aAAU,AAAD,EAAE;IAC3B,IAAI,YAAY,WAAW;QACzB,MAAM,IAAI,MACR;IAEJ;IACA,OAAO;AACT"}},
    {"offset": {"line": 93, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 99, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Lenovo/Desktop/Reel/my-app/app/components/Providers.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { SessionProvider } from \"next-auth/react\";\r\nimport { ImageKitProvider } from \"imagekitio-next\";\r\nimport { NotificationProvider } from \"./Notification\";\r\n\r\nconst urlEndpoint = process.env.NEXT_PUBLIC_URL_ENDPOINT!;\r\nconst publicKey = process.env.NEXT_PUBLIC_PUBLIC_KEY!;\r\n\r\nexport default function Providers({ children }: { children: React.ReactNode }) {\r\n  const authenticator = async () => {\r\n    try {\r\n      const res = await fetch(\"/api/imagekit-auth\");\r\n      if (!res.ok) throw new Error(\"Failed to authenticate\");\r\n      return res.json();\r\n    } catch (error) {\r\n      console.error(\"ImageKit authentication error:\", error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <SessionProvider refetchInterval={5 * 60}>\r\n      <NotificationProvider>\r\n        <ImageKitProvider\r\n          publicKey={publicKey}\r\n          urlEndpoint={urlEndpoint}\r\n          authenticator={authenticator}\r\n        >\r\n          {children}\r\n        </ImageKitProvider>\r\n      </NotificationProvider>\r\n    </SessionProvider>\r\n  );\r\n}"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAJA;;;;;AAMA,MAAM;AACN,MAAM;AAES,SAAS,UAAU,EAAE,QAAQ,EAAiC;IAC3E,MAAM,gBAAgB;QACpB,IAAI;YACF,MAAM,MAAM,MAAM,MAAM;YACxB,IAAI,CAAC,IAAI,EAAE,EAAE,MAAM,IAAI,MAAM;YAC7B,OAAO,IAAI,IAAI;QACjB,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,kCAAkC;YAChD,MAAM;QACR;IACF;IAEA,qBACE,8OAAC,8IAAA,CAAA,kBAAe;QAAC,iBAAiB,IAAI;kBACpC,cAAA,8OAAC,kIAAA,CAAA,uBAAoB;sBACnB,cAAA,8OAAC,qKAAA,CAAA,mBAAgB;gBACf,WAAW;gBACX,aAAa;gBACb,eAAe;0BAEd;;;;;;;;;;;;;;;;AAKX"}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}